<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:sys="using:System"
             xmlns:ia="using:Avalonia.Xaml.Interactivity"
             xmlns:iaCore="using:Avalonia.Xaml.Interactions.Core"
			 xmlns:as="using:CarinaStudio.AppSuite"
			 xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
			 xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
             xmlns:appControls="clr-namespace:CarinaStudio.ULogViewer.Controls;assembly=ULogViewer"
             xmlns:appConverters="clr-namespace:CarinaStudio.ULogViewer.Converters;assembly=ULogViewer"
             xmlns:appLogs="clr-namespace:CarinaStudio.ULogViewer.Logs;assembly=ULogViewer"
             xmlns:appViewModels="clr-namespace:CarinaStudio.ULogViewer.ViewModels;assembly=ULogViewer"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="CarinaStudio.ULogViewer.Controls.SessionView">

	<!-- Data templates -->
	<UserControl.DataTemplates>

		<!-- Log header -->
		<DataTemplate DataType="{x:Type appViewModels:DisplayableLogProperty}">
			<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Separator}" BorderThickness="1,0,0,0" HorizontalAlignment="Stretch" Margin="{DynamicResource Thickness/SessionView.LogHeader.Margin}" Padding="{DynamicResource Thickness/SessionView.LogHeader.Padding}">
				<TextBlock Text="{Binding DisplayName}" HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap"/>
			</Border>
		</DataTemplate>
		
	</UserControl.DataTemplates>

	<!-- Resources -->
	<UserControl.Resources>

		<!-- Log actions menu -->
		<ContextMenu x:Key="logActionMenu">
			<MenuItem Name="showLogPropertyMenuItem" Command="{Binding $parent[UserControl].ShowLogStringPropertyCommand}" Header="{DynamicResource String/SessionView.ShowLogProperty.Disabled}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Details}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].MarkUnmarkSelectedLogsCommand}" Header="{DynamicResource String/SessionView.MarkUnmarkLogs}" InputGesture="M">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Pin}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].SelectMarkedLogsCommand}" Header="{DynamicResource String/SessionView.SelectMarkedLogs}" InputGesture="S"/>
			<Separator/>
			<MenuItem Name="copyLogPropertyMenuItem" Command="{Binding $parent[UserControl].CopyLogPropertyCommand}" Header="{DynamicResource String/SessionView.CopyLogProperty.Disabled}"/>
			<MenuItem Command="{Binding $parent[UserControl].CopySelectedLogsCommand}" Header="{DynamicResource String/SessionView.CopyLogs}" InputGesture="Ctrl+C">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Copy}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].CopySelectedLogsWithFileNamesCommand}" Header="{DynamicResource String/SessionView.CopyLogsWithFileNames}" InputGesture="Ctrl+Shift+C">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Copy}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].FilterLogsByProcessIdCommand}" Header="{DynamicResource String/SessionView.FilterLogsBySelectedProcessId}">
				<MenuItem.CommandParameter>
					<sys:Boolean>False</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].FilterLogsByProcessIdCommand}" Header="{DynamicResource String/SessionView.FilterLogsBySelectedProcessIdOnly}">
				<MenuItem.CommandParameter>
					<sys:Boolean>True</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].FilterLogsByThreadIdCommand}" Header="{DynamicResource String/SessionView.FilterLogsBySelectedThreadId}">
				<MenuItem.CommandParameter>
					<sys:Boolean>False</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].FilterLogsByThreadIdCommand}" Header="{DynamicResource String/SessionView.FilterLogsBySelectedThreadIdOnly}">
				<MenuItem.CommandParameter>
					<sys:Boolean>True</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].ShowFileInExplorerCommand}" Header="{DynamicResource String/SessionView.ShowFileInExplorer}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.FileManager}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Other actions menu -->
		<ContextMenu x:Key="otherActionsMenu" PlacementMode="Bottom">
			<MenuItem Command="{Binding $parent[UserControl].ShowAppOptions}" Header="{DynamicResource String/SessionView.AppOptions}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Settings}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].CheckForAppUpdate}" Header="{DynamicResource String/SessionView.CheckForAppUpdate}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Update}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].RestartAsAdministratorCommand}" Header="{DynamicResource String/SessionView.RestartAsAdministrator}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Administrator}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].ShowAppInfo}" Header="{DynamicResource String/SessionView.AppInfo}"/>
		</ContextMenu>

		<!-- Working directory menu -->
		<ContextMenu x:Key="workingDirectoryActionsMenu" PlacementMode="Top">
			<MenuItem Command="{Binding $parent[UserControl].ShowWorkingDirectoryInExplorerCommand}" Header="{DynamicResource String/SessionView.ShowWorkingDirectoryInExplorer}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.FileManager}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>
		
	</UserControl.Resources>
	
	<!-- Content -->
	<Grid RowDefinitions="Auto,*,Auto">

		<!-- Columns -->
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition MaxWidth="{DynamicResource Double/SessionView.SidePanel.MaxWidth}" MinWidth="{DynamicResource Double/SessionView.SidePanel.MinWidth}" Width="0"/>
		</Grid.ColumnDefinitions>

		<!-- Toolbar -->
		<Panel Grid.ColumnSpan="3">

			<!-- Toolbar -->
			<Border Classes="ToolBar">
				<Grid Name="toolBarContainer" ColumnDefinitions="Auto,*,Auto">

					<!-- Log actions -->
					<StackPanel Orientation="Horizontal">

						<!-- Select log profiles -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SelectAndSetLogProfileCommand}" ToolTip.Tip="{DynamicResource String/SessionView.SetLogProfile}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/LogProfile}"/>
						</Button>

						<!-- Edit log profile -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].EditLogProfileCommand}" IsVisible="{Binding $parent[UserControl].HasLogProfile}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.EditLogProfile}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/EditLogProfile}"/>
						</Button>

						<!-- Set working directory -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SelectAndSetWorkingDirectoryCommand}" IsVisible="{Binding IsWorkingDirectoryNeeded}" ToolTip.Tip="{DynamicResource String/SessionView.SetWorkingDirectory}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.Folder}"/>
						</Button>

						<!-- Add files -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].AddLogFilesCommand}" IsVisible="{Binding IsLogFileNeeded}" ToolTip.Tip="{DynamicResource String/SessionView.AddLogFiles.WithShortcut}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.AddFile}"/>
						</Button>

						<!-- Set URI -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SelectAndSetUriCommand}" IsVisible="{Binding IsUriNeeded}" ToolTip.Tip="{DynamicResource String/SessionView.SetUri}">
							<DrawingPresenter Classes="Icon">
								<DrawingPresenter.Drawing>
									<GeometryDrawing Brush="{DynamicResource Brush/Icon}" Geometry="{StaticResource Geometry/LogProfile.Network}"/>
								</DrawingPresenter.Drawing>
							</DrawingPresenter>
						</Button>

						<!-- Set IP endpoint -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SelectAndSetIPEndPointCommand}" IsVisible="{Binding IsIPEndPointNeeded}" ToolTip.Tip="{DynamicResource String/SessionView.SetIPEndPoint}">
							<DrawingPresenter Classes="Icon">
								<DrawingPresenter.Drawing>
									<GeometryDrawing Brush="{DynamicResource Brush/Icon}" Geometry="{StaticResource Geometry/LogProfile.Network}"/>
								</DrawingPresenter.Drawing>
							</DrawingPresenter>
						</Button>

						<!-- Save logs -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SaveLogsCommand}" IsVisible="{Binding HasLogProfile}" ToolTip.Tip="{DynamicResource String/SessionView.SaveLogs.WithShortcut}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.Save}"/>
						</Button>
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SaveAllLogsCommand}" IsVisible="{Binding HasLogProfile}" ToolTip.Tip="{DynamicResource String/SessionView.SaveAllLogs.WithShortcut}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.SaveAll}"/>
						</Button>

						<!-- Clear files -->
						<Button Classes="ToolBar_Button" Command="{Binding ClearLogFilesCommand}" IsVisible="{Binding IsLogFileNeeded}" ToolTip.Tip="{DynamicResource String/SessionView.ClearLogFiles}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.Delete}"/>
						</Button>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Reload logs -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].ReloadLogsCommand}" ToolTip.Tip="{DynamicResource String/SessionView.ReloadLogs}">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.Refresh}"/>
						</Button>

						<!-- Scroll to latest log -->
						<ToggleButton Classes="ToolBar_ToggleButton" IsChecked="{Binding $parent[UserControl].IsScrollingToLatestLogNeeded, Mode=TwoWay}" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" ToolTip.Tip="{DynamicResource String/SessionView.ScrollToLatestLog}">
							<Panel>
								<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Scrolling}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Scrolling.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

						<!-- Pause/resume -->
						<Button Classes="ToolBar_Button" Command="{Binding PauseResumeLogsReadingCommand}" IsVisible="{Binding IsReadingLogsContinuously}" ToolTip.Tip="{DynamicResource String/SessionView.PauseResumeLogsReading}">
							<DrawingPresenter Classes="Icon">
								<ia:Interaction.Behaviors>
									<iaCore:DataTriggerBehavior Binding="{Binding IsLogsReadingPaused}" Value="True">
										<iaCore:ChangePropertyAction PropertyName="Drawing" Value="{StaticResource Drawing/Icon.PlayMedia}"/>
									</iaCore:DataTriggerBehavior>
									<iaCore:DataTriggerBehavior Binding="{Binding IsLogsReadingPaused}" Value="False">
										<iaCore:ChangePropertyAction PropertyName="Drawing" Value="{StaticResource Drawing/Icon.PauseMedia}"/>
									</iaCore:DataTriggerBehavior>
								</ia:Interaction.Behaviors>
							</DrawingPresenter>
						</Button>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

					</StackPanel>

					<!-- Log filters -->
					<Grid ColumnDefinitions="Auto,Auto,Auto,Auto,*,Auto" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

						<!-- Level filter -->
						<ComboBox Name="logLevelFilterComboBox" Classes="ToolBar_ComboBox" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" IsVisible="false" Items="{Binding $parent[UserControl].ValidLogLevels}" SelectionChanged="OnLogLevelFilterComboBoxSelectionChanged" ToolTip.Tip="{DynamicResource String/SessionView.LogLevelFilter.Description}" VerticalAlignment="Center" Width="{DynamicResource Double/SessionView.ToolBar.LogLevelFilter.Width}">
							<ia:Interaction.Behaviors>
								<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].ValidLogLevels.Count}" ComparisonCondition="GreaterThan" Value="1">
									<iaCore:ChangePropertyAction PropertyName="IsVisible" Value="True"/>
								</iaCore:DataTriggerBehavior>
								<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].ValidLogLevels.Count}" ComparisonCondition="LessThanOrEqual" Value="1">
									<iaCore:ChangePropertyAction PropertyName="IsVisible" Value="False"/>
								</iaCore:DataTriggerBehavior>
							</ia:Interaction.Behaviors>
							<ComboBox.ItemTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<Border Background="{Binding Converter={x:Static appConverters:LogLevelBrushConverter.Default}}" BorderBrush="{DynamicResource ComboBoxItemForeground}" BorderThickness="1" Height="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}" Margin="{DynamicResource Thickness/LogLevelComboBox.Item.Indicator.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}"/>
										<TextBlock Text="{Binding Converter={x:Static appControls:SessionView.LogLevelNameConverter}}" VerticalAlignment="Center"/>
									</StackPanel>
								</DataTemplate>
							</ComboBox.ItemTemplate>
						</ComboBox>

						<!-- PID filter -->
						<TextBox Name="logProcessIdFilterTextBox" Classes="ToolBar_TextBox" Grid.Column="1" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" IsVisible="False" PropertyChanged="OnLogFilterTextBoxPropertyChanged" ToolTip.Tip="{DynamicResource String/SessionView.LogProcessIdFilter.Description}" VerticalAlignment="Center" Watermark="{DynamicResource String/LogProperty.ProcessId}" Width="{DynamicResource Double/SessionView.ToolBar.LogProcessIdFilter.Width}"/>

						<!-- TID filter -->
						<TextBox Name="logThreadIdFilterTextBox" Classes="ToolBar_TextBox" Grid.Column="2" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" IsVisible="False" PropertyChanged="OnLogFilterTextBoxPropertyChanged" ToolTip.Tip="{DynamicResource String/SessionView.LogThreadIdFilter.Description}" VerticalAlignment="Center" Watermark="{DynamicResource String/LogProperty.ThreadId}" Width="{DynamicResource Double/SessionView.ToolBar.LogProcessIdFilter.Width}"/>

						<!-- Filters combinatin mode -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SwitchLogFiltersCombinationModeCommand}" Grid.Column="3" IsVisible="{Binding $parent[UserControl].CanFilterLogsByNonTextFilters}" ToolTip.Tip="{DynamicResource String/SessionView.LogFiltersCombinationMode}">
							<DrawingPresenter Classes="Icon">
								<ia:Interaction.Behaviors>
									<iaCore:DataTriggerBehavior Binding="{Binding LogFiltersCombinationMode}" Value="Intersection">
										<iaCore:ChangePropertyAction PropertyName="Drawing" Value="{StaticResource Drawing/Intersection}"/>
									</iaCore:DataTriggerBehavior>
									<iaCore:DataTriggerBehavior Binding="{Binding LogFiltersCombinationMode}" Value="Union">
										<iaCore:ChangePropertyAction PropertyName="Drawing" Value="{StaticResource Drawing/Union}"/>
									</iaCore:DataTriggerBehavior>
								</ia:Interaction.Behaviors>
							</DrawingPresenter>
						</Button>

						<!-- Text filter -->
						<asControls:RegexTextBox Name="logTextFilterTextBox" Classes="RegexTextBox_InvalidText" Grid.Column="4" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" Margin="{DynamicResource Thickness/ToolBar.Item.Margin}" PropertyChanged="OnLogFilterTextBoxPropertyChanged" ToolTip.Tip="{DynamicResource String/SessionView.LogTextFilter.ToolTip}" VerticalAlignment="Center" Watermark="{DynamicResource String/SessionView.LogTextFilter.Watermark}"/>

						<!-- Filter actions -->
						<StackPanel Grid.Column="5" Orientation="Horizontal">

							<!-- Predefined text filters -->
							<ToggleButton Classes="ToolBar_ToggleButton" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" ToolTip.Tip="{DynamicResource String/SessionView.PredefinedLogTextFilters}">
								<Panel>
									<Panel>
										<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filters}" IsVisible="{Binding ElementName=predefinedLogTextFilterListBox, Path=!SelectedItems.Count}"/>
										<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filters.Active}" IsVisible="{Binding ElementName=predefinedLogTextFilterListBox, Path=SelectedItems.Count}"/>
										<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filters.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
									</Panel>
									<Popup Name="predefinedLogTextFiltersPopup" IsLightDismissEnabled="True" IsOpen="{Binding $parent[ToggleButton].IsChecked, Mode=TwoWay}" MaxHeight="{DynamicResource Double/SessionView.PredefinedLogTextFiltersPopup.MaxHeight}" PlacementTarget="{Binding $parent[ToggleButton]}" Width="{DynamicResource Double/SessionView.PredefinedLogTextFiltersPopup.Width}" WindowManagerAddShadowHint="True">
										<Border Background="{DynamicResource ComboBoxDropDownBackground}" BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}" BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}" Padding="{DynamicResource Thickness/SessionView.PredefinedLogTextFiltersPopup.Padding}">
											<DockPanel>
												<Border Background="{DynamicResource Brush/Dialog.ControlButtonsPanel.Background}" DockPanel.Dock="Bottom" Padding="{DynamicResource Thickness/Dialog.ControlButtonsPanel.Padding}">
													<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
														<Button Classes="Dialog_ControlButton" Command="{Binding $parent[UserControl].CreatePredefinedLogTextFilter}" Content="{DynamicResource String/SessionView.CreatePredefinedLogTextFilter}"/>
														<Button Classes="Dialog_ControlButton" Command="{Binding $parent[UserControl].ClearPredefinedLogTextFilterSelection}" IsEnabled="{Binding ElementName=predefinedLogTextFilterListBox, Path=SelectedItems.Count}" Content="{DynamicResource String/SessionView.ClearPredefinedLogTextFiltersSelection}"/>
													</StackPanel>
												</Border>
												<Border DockPanel.Dock="Top" IsVisible="{Binding $parent[UserControl].PredefinedLogTextFilters.Count}" Padding="{DynamicResource Thickness/SessionView.PredefinedLogTextFilterHint.Padding}">
													<TextBlock Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}" HorizontalAlignment="Center" Text="{DynamicResource String/SessionView.PredefinedLogTextFilters.Hint}" TextTrimming="CharacterEllipsis"/>
												</Border>
												<Panel>
													<ListBox Name="predefinedLogTextFilterListBox" Background="{x:Static Brushes.Transparent}" BorderThickness="0" CornerRadius="0" IsVisible="{Binding $parent[UserControl].PredefinedLogTextFilters.Count}" Items="{Binding $parent[UserControl].PredefinedLogTextFilters}" SelectionChanged="OnPredefinedLogTextFilterListBoxSelectionChanged" SelectionMode="Multiple" VirtualizationMode="None">
														<ListBox.ItemTemplate>
															<DataTemplate DataType="{x:Type appViewModels:PredefinedLogTextFilter}">
																<Grid ColumnDefinitions="Auto,*,Auto">
																	<Grid Height="{DynamicResource Double/SessionView.PredefinedLogTextFilterListBox.Icon.Size}" Margin="{DynamicResource Thickness/SessionView.PredefinedLogTextFilterListBox.Icon.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/SessionView.PredefinedLogTextFilterListBox.Icon.Size}">
																		<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter}" IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"/>
																		<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Filter.Light}" IsVisible="{Binding $parent[ListBoxItem].IsSelected}"/>
																	</Grid>
																	<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																	<Border Classes="InPlaceAction_Reserved" Grid.Column="1"/>
																	<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																		<Button Classes="InPlaceAction_Button" Command="{Binding $parent[UserControl].RemovePredefinedLogTextFilter}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
																			<Border Classes="InPlaceAction_Icon">
																				<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Delete}"/>
																			</Border>
																		</Button>
																		<Button Classes="InPlaceAction_Button" Command="{Binding $parent[UserControl].EditPredefinedLogTextFilter}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
																			<Border Classes="InPlaceAction_Icon">
																				<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/Icon.Edit}"/>
																			</Border>
																		</Button>
																	</StackPanel>
																</Grid>
															</DataTemplate>
														</ListBox.ItemTemplate>
														<ListBox.Styles>
															<Style Selector="ListBoxItem">
																<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
																<Setter Property="Padding" Value="{DynamicResource Thickness/SessionView.PredefinedLogTextFilterListBox.Item.Padding}"/>
																<Setter Property="ToolTip.Tip" Value="{Binding Regex}"/>
															</Style>
														</ListBox.Styles>
													</ListBox>
													<TextBlock Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}" HorizontalAlignment="Center" IsVisible="{Binding !$parent[UserControl].PredefinedLogTextFilters.Count}" Margin="{DynamicResource Thickness/SessionView.NoPredefinedLogTextFilterHint.Margin}" Text="{DynamicResource String/SessionView.NoPredefinedLogTextFilter}" TextWrapping="Wrap"/>
												</Panel>
											</DockPanel>
										</Border>
									</Popup>
								</Panel>
							</ToggleButton>

							<!-- Reset log filters -->
							<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].ResetLogFiltersCommand}" ToolTip.Tip="{DynamicResource String/SessionView.ResetLogFilters}">
								<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/ClearFilters}"/>
							</Button>

						</StackPanel>

					</Grid>

					<!-- Other actions -->
					<StackPanel Grid.Column="2" Orientation="Horizontal">

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Test -->
						<Button Name="testButton" Classes="ToolBar_Button" Click="OnTestButtonClick" ToolTip.Tip="Test">
							<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.Lab}"/>
						</Button>

						<!-- Other actions -->
						<ToggleButton Name="otherActionsButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].ShowOtherActions}" ToolTip.Tip="{DynamicResource String/SessionView.OtherActions}">
							<Panel>
								<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.More}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<DrawingPresenter Classes="Icon" Drawing="{StaticResource Drawing/Icon.More.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

					</StackPanel>

				</Grid>
			</Border>

			<!-- Progress bar -->
			<ProgressBar Background="{x:Null}" CornerRadius="0" Grid.ColumnSpan="3" Grid.Row="1" IsIndeterminate="True" IsVisible="{Binding IsProcessingLogs}" MaxHeight="{DynamicResource Double/SessionView.LogsProgessingBar.Height}" MinHeight="{DynamicResource Double/SessionView.LogsProgessingBar.Height}" VerticalAlignment="Bottom"/>
			
		</Panel>

		<!-- Logs -->
		<Grid Background="{x:Static Brushes.Transparent}" DragDrop.AllowDrop="True" Grid.Row="1" RowDefinitions="Auto,*">

			<!-- Header -->
			<Border Background="{DynamicResource Brush/SessionView.LogHeader.Background}">
				<Grid Name="logHeaderContainer">
					<TextBlock Margin="{DynamicResource Thickness/SessionView.LogHeader.Margin}" Padding="{DynamicResource Thickness/SessionView.LogHeader.Padding}" Text=" "/>
					<Grid Name="logHeaderGrid"/>
				</Grid>
			</Border>

			<!-- ListBox -->
			<ListBox Name="logListBox" AutoScrollToSelectedItem="False" Background="{DynamicResource Brush/WorkingArea.Background}" BorderThickness="0" ContextMenu="{DynamicResource logActionMenu}" CornerRadius="0" DoubleTapped="OnLogListBoxDoubleTapped" Grid.Row="1" HorizontalAlignment="Stretch" IsEnabled="{Binding $parent[UserControl].HasLogProfile}" Items="{Binding Logs}" Padding="{DynamicResource Thickness/SessionView.LogListBox.Padding}" ScrollViewer.HorizontalScrollBarVisibility="Visible" SelectionChanged="OnLogListBoxSelectionChanged" SelectionMode="Multiple" VirtualizationMode="Simple">
				<ListBox.Styles>
					<Style Selector="ListBoxItem">
						<Setter Property="HorizontalAlignment" Value="Stretch"/>
						<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
						<Setter Property="Padding" Value="0"/>
					</Style>
					<Style Selector="ListBoxItem:pressed /template/ ContentPresenter#PART_ContentPresenter">
						<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
					</Style>
					<Style Selector="ListBoxItem:selected /template/ ContentPresenter#PART_ContentPresenter">
						<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected}"/>
					</Style>
					<Style Selector="ListBoxItem:selected:pointerover /template/ ContentPresenter#PART_ContentPresenter">
						<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected.PointerOver}"/>
					</Style>
					<Style Selector="ListBoxItem:selected:pressed /template/ ContentPresenter#PART_ContentPresenter">
						<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
					</Style>
				</ListBox.Styles>
			</ListBox>

			<!-- Hint: no log to show -->
			<Border Grid.Row="1" IsVisible="{Binding !HasLogs}">
				<TextBlock FontSize="{DynamicResource Double/SessionView.Hint.NoLogToShow.FontSize}" HorizontalAlignment="Center" IsVisible="{Binding $parent[UserControl].HasLogProfile}" Text="{DynamicResource String/SessionView.Hint.NoLogToShow}" TextWrapping="Wrap" VerticalAlignment="Center"/>
			</Border>

			<!-- Hint: select log profile -->
			<StackPanel Grid.Row="1" HorizontalAlignment="Center" IsVisible="{Binding !$parent[UserControl].HasLogProfile}" Orientation="Horizontal">
				<TextBlock FontSize="{DynamicResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Text="{DynamicResource String/SessionView.Hint.SelectLogProfile.Section1}" TextWrapping="NoWrap" VerticalAlignment="Center"/>
				<Border Height="{DynamicResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Margin="{DynamicResource Thickness/SessionView.Hint.SelectLogProfile.Icon.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/SessionView.Hint.SelectLogProfile.FontSize}">
					<DrawingPresenter Classes="Icon" Drawing="{DynamicResource Drawing/LogProfile}"/>
				</Border>
				<TextBlock FontSize="{DynamicResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Text="{DynamicResource String/SessionView.Hint.SelectLogProfile.Section2}" TextWrapping="NoWrap" VerticalAlignment="Center"/>
			</StackPanel>

		</Grid>

		<!-- Status bar -->
		<Border Background="{StaticResource Brush/SessionView.StatusBar.Background.Inactive}" Classes="StatusBar" Grid.ColumnSpan="3" Grid.Row="2">
			<ia:Interaction.Behaviors>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="None">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionView.StatusBar.Background.Inactive}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Active">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/StatusBar.Background}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Error">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionView.StatusBar.Background.Error}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Paused">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionView.StatusBar.Background.Paused}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Warning">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionView.StatusBar.Background.Warning}"/>
				</iaCore:DataTriggerBehavior>
			</ia:Interaction.Behaviors>
			<Grid ColumnDefinitions="Auto,Auto,Auto,Auto,*,Auto,Auto,Auto,Auto,Auto,Auto,Auto">

				<!-- Empty view to reserve space -->
				<TextBlock Classes="StatusBar_TextBlock" Grid.ColumnSpan="5" Text="{DynamicResource String/SessionView.AllLogCount}" Opacity="0"/>

				<!-- Number of logs -->
				<StackPanel IsVisible="{Binding HasLogs}" Opacity="0" Orientation="Horizontal">
					<!-- Empty view to reserve space -->
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.AllLogCount}"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="00000000"/>
					<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding IsFilteringLogsNeeded}" Text="{DynamicResource String/SessionView.FilteredLogCount}"/>
					<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding IsFilteringLogsNeeded}" Text="00000000"/>
					<Separator Classes="StatusBar_Separator"/>
				</StackPanel>
				<StackPanel IsVisible="{Binding HasLogs}" Orientation="Horizontal">
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.AllLogCount}"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="{Binding AllLogCount}" VerticalAlignment="Center"/>
					<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding IsFilteringLogsNeeded}" Text="{DynamicResource String/SessionView.FilteredLogCount}"/>
					<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding IsFilteringLogsNeeded}" Text="{Binding FilteredLogCount}"/>
					<Separator Classes="StatusBar_Separator"/>
				</StackPanel>

				<!-- Last logs reading duration -->
				<StackPanel Grid.Column="1" IsVisible="{Binding HasLastLogsReadingDuration}" Orientation="Horizontal">
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.LastLogsReadingDuration}"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="{Binding LastLogsReadingDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}"/>
					<Separator Classes="StatusBar_Separator"/>
				</StackPanel>

				<!-- Last logs filtering duration -->
				<StackPanel Grid.Column="2" IsVisible="{Binding HasLastLogsFilteringDuration}" Orientation="Horizontal">
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.LastLogsFilteringDuration}"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="{Binding LastLogsFilteringDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}"/>
					<Separator Classes="StatusBar_Separator"/>
				</StackPanel>

				<!-- Selected logs -->
				<StackPanel Grid.Column="3" IsVisible="{Binding #logListBox.SelectedItems.Count}" Orientation="Horizontal">
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.SelectedLogCount}"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="{Binding #logListBox.SelectedItems.Count}"/>
					<Separator Classes="StatusBar_Separator"/>
				</StackPanel>

				<!-- Filtering progress -->
				<StackPanel Grid.Column="5" IsVisible="{Binding IsFilteringLogs}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Filter}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.LogsFilteringProgress}"/>
					<Panel VerticalAlignment="Center">
						<TextBlock Classes="StatusBar_TextBlock" Text="00.0%" Opacity="0"/>
						<TextBlock Classes="StatusBar_TextBlock" HorizontalAlignment="Left" Text="{Binding LogsFilteringProgress, Converter={x:Static appViewModels:Session.LogsFilteringProgressConverter}}"/>	
					</Panel>
				</StackPanel>

				<!-- Saving logs -->
				<StackPanel Grid.Column="6" IsVisible="{Binding IsSavingLogs}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Save}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.SavingLogs}"/>
				</StackPanel>

				<!-- Waiting for data sources -->
				<StackPanel Grid.Column="7" IsVisible="{Binding IsWaitingForDataSources}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Waiting}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.WaitingForDataSources}"/>
				</StackPanel>

				<!-- URI -->
				<StackPanel Grid.Column="8" IsVisible="{Binding HasUri}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/LogProfile.Network}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" ToolTip.Placement="Left" ToolTip.Tip="{Binding Uri}">
						<TextBlock.Text>
							<MultiBinding StringFormat="{}{0}://{1}:{2}">
								<Binding Path="Uri.Scheme"/>
								<Binding Path="Uri.Host"/>
								<Binding Path="Uri.Port"/>
							</MultiBinding>
						</TextBlock.Text>
					</TextBlock>
				</StackPanel>

				<!-- IP endpoint -->
				<StackPanel Grid.Column="8" IsVisible="{Binding HasIPEndPoint}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/LogProfile.Network}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{Binding IPEndPoint}"/>
				</StackPanel>

				<!-- Working directory -->
				<StackPanel Grid.Column="9" IsVisible="{Binding HasWorkingDirectory}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<ToggleButton Name="workingDirectoryActionsButton" Classes="StatusBar_ToggleButton" Command="{Binding $parent[UserControl].ShowWorkingDirectoryActions}" ToolTip.Placement="Left" ToolTip.Tip="{Binding WorkingDirectoryPath}">
						<StackPanel Orientation="Horizontal">
							<Border Classes="StatusBar_Icon">
								<DrawingPresenter Classes="Icon">
									<DrawingPresenter.Drawing>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Folder}"/>
									</DrawingPresenter.Drawing>
								</DrawingPresenter>
							</Border>
							<TextBlock Classes="StatusBar_TextBlock" Text="{Binding WorkingDirectoryName}"/>
							<Border Classes="StatusBar_DropDownIcon">
								<DrawingPresenter Classes="Icon">
									<DrawingPresenter.Drawing>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.MoveUp}"/>
									</DrawingPresenter.Drawing>
								</DrawingPresenter>
							</Border>
						</StackPanel>
					</ToggleButton>
				</StackPanel>

				<!-- Error message -->
				<StackPanel Grid.Column="10" IsVisible="{Binding HasAllDataSourceErrors}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Error}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.HasAllDataSourceErrors}"/>
				</StackPanel>
				<StackPanel Grid.Column="10" IsVisible="{Binding HasPartialDataSourceErrors}" Orientation="Horizontal">
					<Border Classes="StatusBar_Icon">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Warning}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionView.HasPartialDataSourceErrors}"/>
				</StackPanel>

				<!-- Process info -->
				<StackPanel Grid.Column="11" IsVisible="{Binding $parent[UserControl].IsProcessInfoVisible}" Orientation="Horizontal">
					<Separator Classes="StatusBar_Separator"/>
					<StackPanel IsVisible="{Binding $parent[UserControl].Application.IsDebugMode, Mode=OneTime}" Orientation="Horizontal">
						<Border Classes="StatusBar_Icon" ToolTip.Tip="{DynamicResource String/SessionView.CpuUsage}">
							<DrawingPresenter Classes="Icon">
								<DrawingPresenter.Drawing>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Speed}"/>
								</DrawingPresenter.Drawing>
							</DrawingPresenter>
						</Border>
						<Panel VerticalAlignment="Center">
							<TextBlock Classes="StatusBar_TextBlock" Text="000 ms   " Opacity="0" VerticalAlignment="Center"/>
							<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding $parent[UserControl].Application.ProcessInfo.UIResponseDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionView.UIResponseDuration}"/>
						</Panel>
					</StackPanel>
					<Border Classes="StatusBar_Icon" ToolTip.Tip="{DynamicResource String/SessionView.CpuUsage}">
						<DrawingPresenter Classes="Icon">
							<DrawingPresenter.Drawing>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Cpu}"/>
							</DrawingPresenter.Drawing>
						</DrawingPresenter>
					</Border>
					<Panel VerticalAlignment="Center">
						<TextBlock Classes="StatusBar_TextBlock" Text="00.0 % " Opacity="0"/>
						<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Left" Text="{Binding $parent[UserControl].Application.ProcessInfo.CpuUsagePercentage, StringFormat={}{0:F1} %}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionView.CpuUsage}"/>
					</Panel>
					<StackPanel IsVisible="{Binding $parent[UserControl].IsNotMacOS, Mode=OneTime}" Orientation="Horizontal">
						<Border Classes="StatusBar_Icon" ToolTip.Tip="{DynamicResource String/SessionView.MemoryUsage}">
							<DrawingPresenter Classes="Icon">
								<DrawingPresenter.Drawing>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Memory}"/>
								</DrawingPresenter.Drawing>
							</DrawingPresenter>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" Text="{Binding $parent[UserControl].Application.ProcessInfo.PrivateMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionView.MemoryUsage}"/>
					</StackPanel>
				</StackPanel>
				
			</Grid>
		</Border>

		<!-- Side panel -->
		<ScrollViewer Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Grid.Column="2" Grid.Row="1" HorizontalAlignment="Stretch" HorizontalScrollBarVisibility="Disabled" IsEnabled="{Binding $parent[UserControl].HasProfile}">
			<StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">

				<!-- Marked logs -->
				<StackPanel Classes="SessionView_SidePanel_Header">
					<DrawingPresenter Classes="SessionView_SidePanel_Header" Drawing="{StaticResource Drawing/Icon.Pin}"/>
					<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
						<TextBlock Classes="SessionView_SidePanel_Header" Text="{DynamicResource String/SessionView.MarkedLogs}"/>
						<TextBlock Classes="SessionView_SidePanel_Header" Text="{Binding MarkedLogs.Count, StringFormat={} ({0})}"/>
					</StackPanel>
				</StackPanel>
				<Panel>
					<ListBox Name="markedLogListBox" Background="{x:Static Brushes.Transparent}" BorderThickness="0" Focusable="False" IsVisible="{Binding HasMarkedLogs}" Items="{Binding MarkedLogs}" SelectionChanged="OnMarkedLogListBoxSelectionChanged" SelectionMode="Single" VirtualizationMode="None">
						<ListBox.Styles>
							<Style Selector="ListBoxItem">
								<Setter Property="HorizontalAlignment" Value="Stretch"/>
								<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
								<Setter Property="Padding" Value="0"/>
							</Style>
							<Style Selector="ListBoxItem:pressed /template/ ContentPresenter#PART_ContentPresenter">
								<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
							</Style>
							<Style Selector="ListBoxItem:selected /template/ ContentPresenter#PART_ContentPresenter">
								<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected}"/>
							</Style>
							<Style Selector="ListBoxItem:selected:pointerover /template/ ContentPresenter#PART_ContentPresenter">
								<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected.PointerOver}"/>
							</Style>
							<Style Selector="ListBoxItem:selected:pressed /template/ ContentPresenter#PART_ContentPresenter">
								<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
							</Style>
						</ListBox.Styles>
					</ListBox>
					<TextBlock Classes="SessionView_SidePanel_EmptyHint" IsVisible="{Binding !HasMarkedLogs}" Text="{DynamicResource String/Common.Empty}"/>
				</Panel>
				
			</StackPanel>
		</ScrollViewer>
		<GridSplitter Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Classes="GridSplitter_Vertical" Grid.Column="1" Grid.Row="1"/>

	</Grid>


</UserControl>
